import asyncio

from aiogram import types
from aiogram.dispatcher import FSMContext

from data.config import ADMINS
from filters import NotBanned
from keyboards.inline.callback_datas import performers_with_orders_cd, paginator_performers_cd, \
    choose_performers_orders_cd, chosen_performers_reserved_order_cd, check_for_execution_cd
from keyboards.inline.my_orders.check_for_execution_kb import check_for_execution_kb
from keyboards.inline.my_orders.choose_performers_order_kb import choose_performers_order_kb
from keyboards.inline.my_orders.choose_performers_orders_kb import choose_performers_orders_kb
from keyboards.inline.my_orders.choose_performers_reserved_order_kb import choose_performers_reserved_order_kb
from keyboards.inline.my_orders.confirm_screenshots_kb import confirm_screenshots_kb
from keyboards.inline.my_orders.performers_with_orders_kb import performers_with_orders_kb
from keyboards.inline.my_orders.performers_without_orders_kb import performers_without_orders_kb
from loader import dp, bot, scheduler
from utils.db_api.commands.orders_cmds import check_is_performers_orders, get_count_performed_orders_performer, \
    get_count_moderate_orders, get_count_reserved_orders, get_performed_performers_orders, \
    get_reserved_performers_orders, get_moderate_performers_orders, get_order_by_id, add_moderate_order, \
    add_media_content
from utils.db_api.commands.price_list_cmds import get_price_by_name
from utils.db_api.commands.users_cmds import get_user_by_id, get_user_by_telegram_id
from utils.db_api.models import Users
from utils.send_to_admins_media import send_to_admins_media
from utils.send_to_admins_performed_order import send_to_admins_performed_order
from utils.send_to_customers_media import send_to_customers_media
from utils.send_to_customers_performed_order import send_to_customers_performed_order


@dp.callback_query_handler(NotBanned(), text="performer", state="*")
async def my_orders_performers(call: types.CallbackQuery, user: Users, state: FSMContext, **kwargs):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∑–∞–∫–∞–∑—ã
    check = await check_is_performers_orders(user_id=user.id)

    if check:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª-–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        count_performed_orders = await get_count_performed_orders_performer(user_id=user.id)

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª-–≤–æ –∑–∞–∫–∞–∑–æ–≤ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        count_moderate_orders = await get_count_moderate_orders(user_id=user.id)

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª-–≤–æ –∑–∞–∫–∞–∑–æ–≤ —á—Ç–æ –æ–∂–∏–¥–∞—é—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        count_reserved_orders = await get_count_reserved_orders(user_id=user.id)

        text = "üõí –ú–æ–∏ –∑–∞–∫–∞–∑—ã\n\n" \
               f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ: {count_performed_orders} —à—Ç.\n" \
               f"‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {count_moderate_orders} —à—Ç.\n" \
               f"–û–∂–∏–¥–∞—é—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {count_reserved_orders} —à—Ç."

        markup = await performers_with_orders_kb(performed=count_performed_orders,
                                                 moderate=count_moderate_orders,
                                                 reserved=count_reserved_orders)

    else:
        text = "üõí –ú–æ–∏ –∑–∞–∫–∞–∑—ã\n\n" \
               "ü§∑‚Äç‚ôÇÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.\n\n" \
               "–•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑?"

        markup = await performers_without_orders_kb()

    await call.message.edit_text(text=text, reply_markup=markup)


@dp.callback_query_handler(NotBanned(), performers_with_orders_cd.filter(), state="*")
async def my_orders_performers_nav(call: types.CallbackQuery, user: Users,
                                   state: FSMContext, callback_data: dict = None, **kwargs):
    if callback_data:
        nav_btn = callback_data.get('nav_btn')
        await state.update_data(order_type=nav_btn)
    else:
        nav_btn = (await state.get_data()).get("order_type")

    if nav_btn == "performed":
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª-–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        count_performed_orders = await get_count_performed_orders_performer(user_id=user.id)

        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        orders = await get_performed_performers_orders(user_id=user.id)

        text = f"‚úÖ –ú–æ–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã: {count_performed_orders} —à—Ç.\n\n" \
               f"üëáüèª –£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ..."

        markup = await choose_performers_orders_kb(type_order='performed', orders=orders)

    elif nav_btn == "reserved":
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª-–≤–æ –∑–∞–∫–∞–∑–æ–≤ —á—Ç–æ –æ–∂–∏–¥–∞—é—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        count_reserved_orders = await get_count_reserved_orders(user_id=user.id)

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏—è —á—Ç–æ –æ–∂–∏–¥–∞—é—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        orders = await get_reserved_performers_orders(user_id=user.id)

        text = f"‚è≥ –ú–æ–∏ –∑–∞–∫–∞–∑—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {count_reserved_orders} —à—Ç.\n\n" \
               f"üëáüèª –£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ..."

        markup = await choose_performers_orders_kb(type_order='reserved', orders=orders)

    else:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª-–≤–æ –∑–∞–∫–∞–∑–æ–≤ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        count_moderate_orders = await get_count_moderate_orders(user_id=user.id)

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        orders = await get_moderate_performers_orders(user_id=user.id)

        text = f"‚è≥ –ú–æ–∏ –∑–∞–∫–∞–∑—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {count_moderate_orders} —à—Ç.\n\n" \
               f"üëáüèª –£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ..."

        markup = await choose_performers_orders_kb(type_order='moderate', orders=orders)

    await call.message.edit_text(text=text, reply_markup=markup)


# –ü–∞–≥–∏–Ω–∞—Ç–æ—Ä –¥–ª—è –∑–∞–¥–∞–Ω–∏–π
@dp.callback_query_handler(NotBanned(), paginator_performers_cd.filter(), state="*")
async def paginator_orders(call: types.CallbackQuery, callback_data: dict, user: Users, state: FSMContext):
    current_page = int(callback_data.get("page"))
    type_order = callback_data.get("type_order")

    if type_order == "performed":
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        orders = await get_performed_performers_orders(user_id=user.id)

    elif type_order == "reserved":
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏—è —á—Ç–æ –æ–∂–∏–¥–∞—é—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        orders = await get_reserved_performers_orders(user_id=user.id)

    else:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        orders = await get_moderate_performers_orders(user_id=user.id)

    markup = await choose_performers_orders_kb(type_order=type_order, orders=orders, page=current_page)
    await call.message.edit_reply_markup(reply_markup=markup)


# –í—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
@dp.callback_query_handler(NotBanned(), choose_performers_orders_cd.filter(), state="*")
async def choose_performers_order(call: types.CallbackQuery, user: Users, state: FSMContext,
                                  callback_data: dict = None, **kwargs):

    if callback_data:
        order_id = int(callback_data.get("order"))
        type_order = callback_data.get("type_order")
        await state.update_data(order_id=order_id, type_order=type_order)

    else:
        data = await state.get_data()
        order_id = data.get("order_id")
        type_order = data.get("type_order")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø–æ id
    order = await get_order_by_id(order_id=order_id)

    if order.type_order == "üî•":
        type_order_name = "üî• –í—ã–∫—É–ø + –æ—Ç–∑—ã–≤ + –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ —É—Å–ª—É–≥—É
        price = (await get_price_by_name(name="üî•")).price

    elif order.type_order == "üí∞":
        type_order_name = "üí∞ –í—ã–∫—É–ø"
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ —É—Å–ª—É–≥—É
        price = (await get_price_by_name(name="üí∞")).price

    else:
        type_order_name = "‚ù§ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ"
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ —É—Å–ª—É–≥—É
        price = (await get_price_by_name(name="‚ù§")).price

    if type_order == "performed":
        text = f"üîΩüîΩüîΩ –ó–∞–∫–∞–∑ {order.order_name} üîΩüîΩüîΩ\n\n" \
               f"–£—Å–ª—É–≥–∞ - {type_order_name}\n\n" \
               f"–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞: {order.goods_cost} —Ä—É–±–ª–µ–π\n" \
               f"üßÆ –ö—ç—à–±–µ–∫/—Å–∫–∏–¥–∫–∞: 196 —Ä—É–±–ª–µ–π\n" \
               f"üí≥ –í–∞—à–∞ –Ω–∞–≥—Ä–∞–¥–∞: 2 –±–∞–ª–ª–∞ + —Ç–æ–≤–∞—Ä\n\n" \
               f"–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:\n{order.goods_name}\n\n" \
               f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ –∑–∞–∫–∞–∑—É:\n{order.order_description}\n\n" \
               f"–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä:\n{order.goods_link}\n\n" \
               f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: ‚úÖ –≤—ã–ø–æ–ª–Ω–µ–Ω."

        markup = await choose_performers_order_kb()

    elif type_order == "reserved":
        text = f"üîΩüîΩüîΩ –ó–∞–∫–∞–∑ {order.order_name} üîΩüîΩüîΩ\n\n" \
               f"–£—Å–ª—É–≥–∞ - {type_order_name}\n\n" \
               f"–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞: {order.goods_cost} —Ä—É–±–ª–µ–π\n" \
               f"üßÆ –ö—ç—à–±–µ–∫/—Å–∫–∏–¥–∫–∞: 196 —Ä—É–±–ª–µ–π\n" \
               f"üí≥ –í–∞—à–∞ –Ω–∞–≥—Ä–∞–¥–∞: 2 –±–∞–ª–ª–∞ + —Ç–æ–≤–∞—Ä\n\n" \
               f"–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:\n{order.goods_name}\n\n" \
               f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ –∑–∞–∫–∞–∑—É:\n{order.order_description}\n\n" \
               f"–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä:\n{order.goods_link}\n\n" \
               f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: ‚è≥ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."

        markup = await choose_performers_reserved_order_kb(order_id=order.id, type_order=type_order,
                                                           order_link=order.goods_link)

    else:
        text = f"üîΩüîΩüîΩ –ó–∞–∫–∞–∑ {order.order_name} üîΩüîΩüîΩ\n\n" \
               f"–£—Å–ª—É–≥–∞ - {type_order_name}\n\n" \
               f"–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞: {order.goods_cost} —Ä—É–±–ª–µ–π\n" \
               f"üßÆ –ö—ç—à–±–µ–∫/—Å–∫–∏–¥–∫–∞: 196 —Ä—É–±–ª–µ–π\n" \
               f"üí≥ –í–∞—à–∞ –Ω–∞–≥—Ä–∞–¥–∞: 2 –±–∞–ª–ª–∞ + —Ç–æ–≤–∞—Ä\n\n" \
               f"–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:\n{order.goods_name}\n\n" \
               f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ –∑–∞–∫–∞–∑—É:\n{order.order_description}\n\n" \
               f"–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä:\n{order.goods_link}\n\n" \
               f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: ‚è≥ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏."

        markup = await choose_performers_order_kb()

    await call.message.edit_text(text=text, reply_markup=markup)


# –ö–Ω–æ–ø–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –Ω–∞ –∑–∞–∫–∞–∑–µ
@dp.callback_query_handler(NotBanned(), chosen_performers_reserved_order_cd.filter(), state="*")
async def check_for_execution(call: types.CallbackQuery, callback_data: dict, user: Users, state: FSMContext):
    await state.set_state("check_for_execution")

    order_id = int(callback_data.get("order"))
    type_order = callback_data.get("type_order")

    photos = []

    await state.update_data(photos=photos)

    markup = await check_for_execution_kb(order_id=order_id, type_order=type_order)

    await call.message.edit_text(text="‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è (–¥–æ 5 —à—Ç), "
                                      "–∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ \"–ì–æ—Ç–æ–≤–æ\"\n\n"
                                      "üëáüèª –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ (–Ω–µ —Ñ–∞–π–ª–æ–º!):",
                                 reply_markup=markup)


# –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø
@dp.message_handler(NotBanned(), content_types=types.ContentTypes.PHOTO, state="check_for_execution")
async def get_photo_check_for_execution(message: types.Message, user: Users, state: FSMContext, **kwargs):
    photos = (await state.get_data()).get("photos")

    if len(photos) < 5:
        photos.append(message.photo[-1].file_id)

    await state.update_data(photos=photos)


# –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø
@dp.message_handler(NotBanned(), content_types=types.ContentTypes.ANY, state="check_for_execution")
async def invalid_get_photo_check_for_execution(message: types.Message, user: Users, state: FSMContext, **kwargs):
    await message.delete()
    msg = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è (–¥–æ 5 —à—Ç)\n\n"
                               "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ (–Ω–µ —Ñ–∞–π–ª–æ–º!)")
    await asyncio.sleep(5)
    await msg.delete()


# –ö–Ω–æ–ø–∫–∞ ‚úÖ –ì–æ—Ç–æ–≤–æ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
@dp.callback_query_handler(NotBanned(), check_for_execution_cd.filter(), state="*")
async def confirm_screenshots(call: types.CallbackQuery, callback_data: dict, user: Users, state: FSMContext):
    order_id = int(callback_data.get("order"))
    type_order = callback_data.get("type_order")

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑
    order = await get_order_by_id(order_id)

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞ –∑–∞–¥–∞–Ω–∏—è
    customer = await get_user_by_id(user_id=order.user_id)

    performer = await get_user_by_telegram_id(call.message.chat.id)

    # –î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –≤ –º–æ–¥–µ—Ä–∞—Ü–∏—é
    moderate_order = await add_moderate_order(order_id=order_id, user_id=user.id)

    photos = (await state.get_data()).get("photos")

    media = types.MediaGroup()

    for photo in photos:
        media.attach_photo(photo)
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –º–æ–¥–µ—Ä–∞—Ü–∏—é
        await add_media_content(moderate_order_id=moderate_order.id, file_id=photo)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –∞–¥–º–∏–Ω—É
    await send_to_admins_media(media=media)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω—É
    await send_to_admins_performed_order(order=order, performer=user, customer=customer)

    notification_24h_job = scheduler.get_job(f"24h|{performer.id}-{order_id}")

    if notification_24h_job:
        notification_24h_job.remove()

    await call.message.delete()
    markup = await confirm_screenshots_kb()
    await call.message.answer(text="‚è≥ –í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–∂–∏–¥–∞–π—Ç–µ.\n\n"
                                   "–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 3 –¥–Ω–µ–π.\n\n"
                                   "–û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –≤—ã –º–æ–∂–µ—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª–µ \"–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏\"",
                              reply_markup=markup)
