from aiogram import types
from aiogram.dispatcher import FSMContext

from filters import NotBanned
from keyboards.inline.my_orders.choose_customers_orders_kb import choose_customers_orders_kb
from keyboards.inline.callback_datas import customers_with_orders_cd, paginator_customers_cd, choose_customers_orders_cd
from keyboards.inline.my_orders.choose_customers_order_kb import choose_customers_order_kb
from keyboards.inline.my_orders.customers_with_orders_kb import customers_with_orders_kb
from keyboards.inline.my_orders.customers_without_orders_kb import customers_without_orders_kb
from loader import dp
from utils.db_api.commands.orders_cmds import check_is_customers_orders, get_count_performed_orders, \
    get_count_in_process_orders, get_performed_customers_orders, get_in_process_customers_orders, get_order_by_id
from utils.db_api.commands.price_list_cmds import get_price_by_name
from utils.db_api.models import Users


@dp.callback_query_handler(NotBanned(), text="customer", state="*")
async def my_orders_customers(call: types.CallbackQuery, user: Users, state: FSMContext, **kwargs):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É –∑–∞–∫–∞–∑—á–∏–∫–∞ –∑–∞–∫–∞–∑—ã
    check = await check_is_customers_orders(user_id=user.id)

    if check:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª-–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∑–∞–∫–∞–∑—á–∏–∫–∞
        count_performed_orders = await get_count_performed_orders(user_id=user.id)

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª-–≤–æ –∑–∞–∫–∞–∑–æ–≤ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–∫–∞–∑—á–∏–∫–∞
        count_in_process_orders = await get_count_in_process_orders(user_id=user.id)

        text = "üõí –ú–æ–∏ –∑–∞–∫–∞–∑—ã\n\n" \
               f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ: {count_performed_orders} —à—Ç.\n" \
               f"‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {count_in_process_orders} —à—Ç."

        markup = await customers_with_orders_kb(performed=count_performed_orders,
                                                in_process=count_in_process_orders)

    else:
        text = "üõí –ú–æ–∏ –∑–∞–∫–∞–∑—ã\n\n" \
               "ü§∑‚Äç‚ôÇÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.\n\n" \
               "–•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑?"

        markup = await customers_without_orders_kb()

    await call.message.edit_text(text=text, reply_markup=markup)


@dp.callback_query_handler(NotBanned(), customers_with_orders_cd.filter(), state="*")
async def my_orders_customers_nav(call: types.CallbackQuery, user: Users,
                                  state: FSMContext, callback_data: dict = None, **kwargs):
    if callback_data:
        nav_btn = callback_data.get('nav_btn')
        await state.update_data(order_type=nav_btn)
    else:
        nav_btn = (await state.get_data()).get("order_type")

    if nav_btn == "performed":
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª-–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∑–∞–∫–∞–∑—á–∏–∫–∞
        count_performed_orders = await get_count_performed_orders(user_id=user.id)

        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑—á–∏–∫–∞
        orders = await get_performed_customers_orders(user_id=user.id)

        text = f"‚úÖ –ú–æ–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã: {count_performed_orders} —à—Ç.\n\n" \
               f"üëáüèª –£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ..."

        markup = await choose_customers_orders_kb(type_order='performed', orders=orders)

    else:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª-–≤–æ –∑–∞–∫–∞–∑–æ–≤ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–∫–∞–∑—á–∏–∫–∞
        count_in_process_orders = await get_count_in_process_orders(user_id=user.id)

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–∫–∞–∑—á–∏–∫–∞
        orders = await get_in_process_customers_orders(user_id=user.id)

        text = f"‚è≥ –ú–æ–∏ –∑–∞–∫–∞–∑—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {count_in_process_orders} —à—Ç.\n\n" \
               f"üëáüèª –£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ..."

        markup = await choose_customers_orders_kb(type_order='in_process', orders=orders)

    await call.message.edit_text(text=text, reply_markup=markup)


# –ü–∞–≥–∏–Ω–∞—Ç–æ—Ä –¥–ª—è –∑–∞–¥–∞–Ω–∏–π
@dp.callback_query_handler(paginator_customers_cd.filter(), state="*")
async def paginator_orders(call: types.CallbackQuery, callback_data: dict, user: Users, state: FSMContext):
    current_page = int(callback_data.get("page"))
    type_order = callback_data.get("type_order")

    if type_order == "performed":
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑—á–∏–∫–∞
        orders = await get_performed_customers_orders(user_id=user.id)
    else:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–∫–∞–∑—á–∏–∫–∞
        orders = await get_in_process_customers_orders(user_id=user.id)

    markup = await choose_customers_orders_kb(type_order=type_order, orders=orders, page=current_page)
    await call.message.edit_reply_markup(reply_markup=markup)


# –í—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
@dp.callback_query_handler(choose_customers_orders_cd.filter(), state="*")
async def choose_customers_order(call: types.CallbackQuery, callback_data: dict, user: Users, state: FSMContext):
    order_id = int(callback_data.get("order"))

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø–æ id
    order = await get_order_by_id(order_id=order_id)

    if order.performed:
        order_performed = "‚úÖ –≤—ã–ø–æ–ª–Ω–µ–Ω"
    else:
        order_performed = "‚è≥ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"

    if order.type_order == "üî•":
        type_order = "üî• –í—ã–∫—É–ø + –æ—Ç–∑—ã–≤ + –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ —É—Å–ª—É–≥—É
        price = (await get_price_by_name(name="üî•")).price

    elif order.type_order == "üí∞":
        type_order = "üí∞ –í—ã–∫—É–ø"
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ —É—Å–ª—É–≥—É
        price = (await get_price_by_name(name="üí∞")).price

    else:
        type_order = "‚ù§ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ"
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ —É—Å–ª—É–≥—É
        price = (await get_price_by_name(name="‚ù§")).price

    text = f"üîΩüîΩüîΩ –ó–∞–∫–∞–∑ {order.order_name} üîΩüîΩüîΩ\n\n" \
           f"–£—Å–ª—É–≥–∞ - {type_order}\n\n" \
           f"‚ù§Ô∏è –ö–æ–º–∏—Å—Å–∏—è —Å–µ—Ä–≤–∏—Å–∞ –∑–∞ 1 —É—Å–ª—É–≥—É: {price} —Ä—É–±.\n" \
           f"üßÆ –í—ã –∑–∞–∫–∞–∑–∞–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {order.goal_amount} —à—Ç.\n" \
           f"üí≥ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏: {order.order_cost} —Ä—É–±–ª–µ–π\n\n" \
           f"–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä:\n" \
           f"{order.goods_link}\n\n" \
           f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: {order_performed}."

    markup = await choose_customers_order_kb()

    await call.message.edit_text(text=text, reply_markup=markup)
