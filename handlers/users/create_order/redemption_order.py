import asyncio

from aiogram import types
from aiogram.dispatcher import FSMContext

from filters import NotBanned
from handlers.users.balance.balance_menu import paid_for_order
from keyboards.inline.callback_datas import redemption_order_cd, confirm_redemption_order_cd
from keyboards.inline.create_order.cashback_redemption_order_kb import cashback_redemption_order_kb
from keyboards.inline.create_order.confirm_redemption_order_kb import confirm_redemption_order_kb
from keyboards.inline.create_order.contacts_redemption_order_kb import contacts_redemption_order_kb
from keyboards.inline.create_order.goods_cost_redemption_order_kb import goods_cost_redemption_order_kb
from keyboards.inline.create_order.goods_link_redemption_order_kb import goods_link_redemption_order_kb
from keyboards.inline.create_order.goods_name_redemption_order_kb import goods_name_redemption_order_kb
from keyboards.inline.create_order.order_description_redemption_order_kb import order_description_redemption_order_kb
from keyboards.inline.create_order.redemption_order_kb import redemption_order_kb
from loader import dp
from utils.db_api.commands.orders_cmds import add_order, update_order_goal_amount_order_cost_by_id, \
    update_order_goods_name_by_id, update_order_description_by_id, update_order_goods_cost_by_id, \
    update_order_goods_link_by_id, \
    update_order_contacts_by_id, get_order_by_id, update_order_confirmed_by_id, update_order_cashback_by_id
from utils.db_api.commands.price_list_cmds import get_price_by_name
from utils.db_api.models import Users
from re import compile


# üí∞ –í—ã–∫—É–ø
async def redemption_order(call: types.CallbackQuery, user: Users, state: FSMContext, **kwargs):
    await state.set_state("redemption_order")

    # –î–æ–±–∞–≤–ª—è–µ–º call –≤ state
    await state.update_data(call=call)

    # –ï—Å–ª–∏ –≤ state –Ω–µ—Ç id –∑–∞–∫–∞–∑–∞ - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
    if (await state.get_data()).get('current_order_id') is None:
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        order = await add_order(user_id=user.id, type_order='üí∞')

        # –î–æ–±–∞–≤–ª—è–µ–º order id –≤ state
        await state.update_data(current_order_id=order.id)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ —É—Å–ª—É–≥—É
    price = (await get_price_by_name(name="üí∞")).price

    text = f"–£—Å–ª—É–≥–∞: \n" \
           f"üî• –í—ã–∫—É–ø + –æ—Ç–∑—ã–≤ + –∏–∑–±—Ä–∞–Ω–Ω–æ–µ\n\n" \
           f"–û–ø–∏—Å–∞–Ω–∏–µ: –∫–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–∫—É–ø–∞–µ—Ç —Ç–æ–≤–∞—Ä\n\n" \
           f"–ö–æ–º–∏—Å—Å–∏—è —Å–µ—Ä–≤–∏—Å–∞: {price} —Ä –∑–∞ 1 –≤—ã–∫—É–ø\n\n" \
           f"üëáüèª –í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª-–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π:"

    markup = await redemption_order_kb()

    await call.message.edit_text(text=text, reply_markup=markup)


# –ù–∞–≤–∏–≥–∞—Ü–∏—è –≤ –≤—ã–±–æ—Ä–µ –∫–æ–ª-–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π üî• –í—ã–∫—É–ø + –æ—Ç–∑—ã–≤ + ‚ù§
@dp.callback_query_handler(NotBanned(), redemption_order_cd.filter(), state="redemption_order")
async def redemption_order_nav(call: types.CallbackQuery, callback_data: dict, user: Users, state: FSMContext,
                               **kwargs):
    nav_btn = callback_data.get('nav_btn')
    current_order_id = int((await state.get_data()).get("current_order_id"))

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ —É—Å–ª—É–≥—É
    price = (await get_price_by_name(name="üí∞")).price

    # –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–¥–∞–Ω–∏—è
    order_cost = int(nav_btn) * price

    # –û–±–Ω–æ–≤–ª—è–µ–º goal_amount –∑–∞–∫–∞–∑–∞
    await update_order_goal_amount_order_cost_by_id(order_id=current_order_id,
                                                    goal_amount=int(nav_btn),
                                                    order_cost=order_cost)

    await goods_name_redemption_order(
        call=call,
        user=user,
        state=state
    )


# –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –∫–æ–ª-–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@dp.message_handler(NotBanned(), regexp=compile(r"^\d+$"), state="redemption_order")
async def valid_input_redemption_order(message: types.Message, user: Users, state: FSMContext, **kwargs):
    call: types.CallbackQuery = (await state.get_data()).get("call")
    current_order_id = int((await state.get_data()).get("current_order_id"))

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ —É—Å–ª—É–≥—É
    price = (await get_price_by_name(name="üí∞")).price

    # –ö–æ–ª-–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π
    goal_amount = int(message.text)
    await message.delete()

    # –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–¥–∞–Ω–∏—è
    order_cost = goal_amount * price

    # –û–±–Ω–æ–≤–ª—è–µ–º goal_amount –∑–∞–∫–∞–∑–∞
    await update_order_goal_amount_order_cost_by_id(order_id=current_order_id,
                                                    goal_amount=goal_amount,
                                                    order_cost=order_cost)

    # –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    await goods_name_redemption_order(call=call, user=user, state=state)


# –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –∫–æ–ª-–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@dp.message_handler(NotBanned(), content_types=types.ContentTypes.ANY, state="redemption_order")
async def invalid_input_redemption_order(message: types.Message, user: Users, state: FSMContext, **kwargs):
    error_msg = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ")
    await asyncio.sleep(5)
    await message.delete()
    await error_msg.delete()


# –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
async def goods_name_redemption_order(call: types.CallbackQuery, user: Users, state: FSMContext, **kwargs):
    await state.set_state("goods_name_redemption_order")

    text = f"–£—Å–ª—É–≥–∞: \n" \
           f"üí∞ –í—ã–∫—É–ø\n\n" \
           f"üëáüèª –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–¥–æ 40 —Å–∏–º–≤–æ–ª–æ–≤)"

    markup = await goods_name_redemption_order_kb()

    await call.message.edit_text(text=text, reply_markup=markup)


# –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@dp.message_handler(NotBanned(), regexp=compile(r"^.{0,40}$"), state="goods_name_redemption_order")
async def valid_input_goods_name_redemption_order(message: types.Message, user: Users, state: FSMContext, **kwargs):
    call: types.CallbackQuery = (await state.get_data()).get("call")
    current_order_id = int((await state.get_data()).get("current_order_id"))

    # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    goods_name = message.text
    await message.delete()

    # –û–±–Ω–æ–≤–ª—è–µ–º goods_name –∑–∞–∫–∞–∑–∞
    await update_order_goods_name_by_id(order_id=current_order_id, goods_name=goods_name)

    # –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏–∑–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    await order_description_redemption_order(call=call, user=user, state=state)


# –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@dp.message_handler(NotBanned(), content_types=types.ContentTypes.ANY, state="goods_name_redemption_order")
async def invalid_input_goods_name_redemption_order(message: types.Message, user: Users, state: FSMContext, **kwargs):
    error_msg = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
    await asyncio.sleep(5)
    await message.delete()
    await error_msg.delete()


# –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
async def order_description_redemption_order(call: types.CallbackQuery, user: Users, state: FSMContext, **kwargs):
    await state.set_state("order_description_redemption_order")

    text = f"–£—Å–ª—É–≥–∞: \n" \
           f"üí∞ –í—ã–∫—É–ø\n\n" \
           f"üëáüèª –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è (–¥–æ 400 —Å–∏–º–≤–æ–ª–æ–≤)\n\n" \
           f"–ö –ø—Ä–∏–º–µ—Ä—É:\n" \
           f"\"–í—ã–∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä\""

    markup = await order_description_redemption_order_kb()

    await call.message.edit_text(text=text, reply_markup=markup)


# –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@dp.message_handler(NotBanned(), regexp=compile(r"^.{0,400}$"), state="order_description_redemption_order")
async def valid_input_order_description_redemption_order(message: types.Message, user: Users, state: FSMContext,
                                                         **kwargs):
    call: types.CallbackQuery = (await state.get_data()).get("call")
    current_order_id = int((await state.get_data()).get("current_order_id"))

    # –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    order_description = message.text
    await message.delete()

    # –û–±–Ω–æ–≤–ª—è–µ–º order_description –∑–∞–∫–∞–∑–∞
    await update_order_description_by_id(order_id=current_order_id, order_description=order_description)

    # –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞
    await goods_cost_redemption_order(call=call, user=user, state=state)


# –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@dp.message_handler(NotBanned(), content_types=types.ContentTypes.ANY, state="order_description_redemption_order")
async def invalid_input_order_description_redemption_order(message: types.Message, user: Users, state: FSMContext,
                                                           **kwargs):
    error_msg = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞")
    await asyncio.sleep(5)
    await message.delete()
    await error_msg.delete()


# –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞
async def goods_cost_redemption_order(call: types.CallbackQuery, user: Users, state: FSMContext, **kwargs):
    await state.set_state("goods_cost_redemption_order")

    text = f"–£—Å–ª—É–≥–∞: \n" \
           f"üí∞ –í—ã–∫—É–ø\n\n" \
           f"üëáüèª –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ)"

    markup = await goods_cost_redemption_order_kb()

    await call.message.edit_text(text=text, reply_markup=markup)


# –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@dp.message_handler(NotBanned(), regexp=compile(r"^\d*$"), state="goods_cost_redemption_order")
async def valid_input_goods_cost_redemption_order(message: types.Message, user: Users, state: FSMContext, **kwargs):
    call: types.CallbackQuery = (await state.get_data()).get("call")
    current_order_id = int((await state.get_data()).get("current_order_id"))

    # –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞
    goods_cost = int(message.text)
    await message.delete()

    # –û–±–Ω–æ–≤–ª—è–µ–º order_description –∑–∞–∫–∞–∑–∞
    await update_order_goods_cost_by_id(order_id=current_order_id, goods_cost=goods_cost)

    # –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –∫—ç—à–±–µ–∫
    await cashback_redemption_order(call=call, user=user, state=state)


# –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@dp.message_handler(NotBanned(), content_types=types.ContentTypes.ANY, state="goods_cost_redemption_order")
async def invalid_input_goods_cost_redemption_order(message: types.Message, user: Users, state: FSMContext, **kwargs):
    error_msg = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ")
    await asyncio.sleep(5)
    await message.delete()
    await error_msg.delete()


# –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –∫—ç—à–±–µ–∫
async def cashback_redemption_order(call: types.CallbackQuery, user: Users, state: FSMContext, **kwargs):
    await state.set_state("cashback_redemption_order")

    text = f"–£—Å–ª—É–≥–∞: \n" \
           f"üí∞ –í—ã–∫—É–ø\n\n" \
           f"üëáüèª –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫—ç—à–±–µ–∫ —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ –æ—Ç 50% –∏ –¥–æ 100%)"

    markup = await cashback_redemption_order_kb()

    await call.message.edit_text(text=text, reply_markup=markup)


# –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –∫—ç—à–±–µ–∫–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@dp.message_handler(NotBanned(), regexp=compile(r"^([5-9][\d]|100)$"), state="cashback_redemption_order")
async def valid_input_cashback_redemption_order(message: types.Message, user: Users, state: FSMContext, **kwargs):
    call: types.CallbackQuery = (await state.get_data()).get("call")
    current_order_id = int((await state.get_data()).get("current_order_id"))

    # –ö—ç—à–±–µ–∫/—Å–∫–∏–¥–∫–∞
    cashback = int(message.text)
    await message.delete()

    # –û–±–Ω–æ–≤–ª—è–µ–º cashback –∑–∞–∫–∞–∑–∞
    await update_order_cashback_by_id(order_id=current_order_id, cashback=cashback)

    # –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä
    await goods_link_redemption_order(call=call, user=user, state=state)


# –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –∫—ç—à–±–µ–∫–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@dp.message_handler(NotBanned(), content_types=types.ContentTypes.ANY, state="cashback_redemption_order")
async def invalid_input_cashback_redemption_order(message: types.Message, user: Users, state: FSMContext, **kwargs):
    error_msg = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ –æ—Ç 50 –¥–æ 100")
    await asyncio.sleep(5)
    await message.delete()
    await error_msg.delete()


# –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä
async def goods_link_redemption_order(call: types.CallbackQuery, user: Users, state: FSMContext, **kwargs):
    await state.set_state("goods_link_redemption_order")

    text = f"–£—Å–ª—É–≥–∞: \n" \
           f"üí∞ –í—ã–∫—É–ø\n\n" \
           f" –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä –Ω–∞ Wildberries:\n\n" \
           f"–ü—Ä–∏–º–µ—Ä—ã —Å—Å—ã–ª–æ–∫:\n" \
           f"1) https://www.wildberries.ru/catalog/13724854/detail.aspx?targetUrl=MI \n" \
           f"2) www.wildberries.ru/catalog/13724854/detail.aspx?targetUrl=MI\n" \
           f"3) wildberries.ru/catalog/13724854/detail.aspx?targetUrl=MI"

    markup = await goods_link_redemption_order_kb()

    await call.message.edit_text(text=text, reply_markup=markup, disable_web_page_preview=True)


# –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–æ–≤–∞—Ä —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@dp.message_handler(NotBanned(), state="goods_link_redemption_order")
async def valid_input_goods_link_redemption_order(message: types.Message, user: Users, state: FSMContext, **kwargs):
    call: types.CallbackQuery = (await state.get_data()).get("call")
    current_order_id = int((await state.get_data()).get("current_order_id"))

    # –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä
    goods_link = message.text
    await message.delete()

    # –û–±–Ω–æ–≤–ª—è–µ–º goods_link –∑–∞–∫–∞–∑–∞
    await update_order_goods_link_by_id(order_id=current_order_id, goods_link=goods_link)

    # –ü—Ä–æ—Å–∏–º –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏
    await contacts_redemption_order(call=call, user=user, state=state)


# –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–æ–≤–∞—Ä —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@dp.message_handler(NotBanned(), content_types=types.ContentTypes.ANY, state="goods_link_redemption_order")
async def invalid_input_goods_link_redemption_order(message: types.Message, user: Users, state: FSMContext, **kwargs):
    error_msg = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä")
    await asyncio.sleep(5)
    await message.delete()
    await error_msg.delete()


# –ü—Ä–æ—Å–∏–º –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏
async def contacts_redemption_order(call: types.CallbackQuery, user: Users, state: FSMContext, **kwargs):
    await state.set_state("contacts_redemption_order")

    text = f"–£—Å–ª—É–≥–∞: \n" \
           f"üí∞ –í—ã–∫—É–ø\n\n" \
           f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü—Ä–∏–º–µ—Ä—ã –≤–≤–æ–¥–∞:\n" \
           f"+7(903)888-88-88\n" \
           f"8(999)99-999-99\n" \
           f"+380(67)777-7-777\n" \
           f"001-541-754-3010\n" \
           f"+1-541-754-3010\n" \
           f"19-49-89-636-48018\n" \
           f"+233 205599853"

    markup = await contacts_redemption_order_kb()

    await call.message.edit_text(text=text, reply_markup=markup)


# –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@dp.message_handler(NotBanned(), regexp=compile(r"^(\s*)?(\+)?([- _():=+]?\d[- _():=+]?){10,14}(\s*)?$"),
                    state="contacts_redemption_order")
async def valid_input_contacts_redemption_order(message: types.Message, user: Users, state: FSMContext, **kwargs):
    call: types.CallbackQuery = (await state.get_data()).get("call")
    current_order_id = int((await state.get_data()).get("current_order_id"))

    # –ù–æ–≤–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    contacts = message.text
    await message.delete()

    # –û–±–Ω–æ–≤–ª—è–µ–º goods_link –∑–∞–∫–∞–∑–∞
    await update_order_contacts_by_id(order_id=current_order_id, contacts=contacts)

    # –ü—Ä–æ—Å–∏–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑
    await confirm_redemption_order(call=call, user=user, state=state)


# –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@dp.message_handler(NotBanned(), content_types=types.ContentTypes.ANY, state="contacts_redemption_order")
async def invalid_input_contacts_redemption_order(message: types.Message, user: Users, state: FSMContext, **kwargs):
    error_msg = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
    await asyncio.sleep(5)
    await message.delete()
    await error_msg.delete()


# –ü—Ä–æ—Å–∏–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑
async def confirm_redemption_order(call: types.CallbackQuery, user: Users, state: FSMContext, **kwargs):
    await state.set_state("confirm_redemption_order")

    current_order_id = int((await state.get_data()).get("current_order_id"))

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ —É—Å–ª—É–≥—É
    price = (await get_price_by_name(name="üí∞")).price

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    order = await get_order_by_id(order_id=current_order_id)

    text = f"–ü–û–î–¢–í–ï–†–î–ò–¢–ï –î–ê–ù–ù–´–ï:\n\n" \
           f"–£—Å–ª—É–≥–∞:\n" \
           f"üí∞ –í—ã–∫—É–ø\n\n" \
           f"‚ù§Ô∏è –ö–æ–º–∏—Å—Å–∏—è —Å–µ—Ä–≤–∏—Å–∞ –∑–∞ 1 —É—Å–ª—É–≥—É: {price} —Ä—É–±.\n" \
           f"üßÆ –í—ã –∑–∞–∫–∞–∑–∞–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {order.goal_amount} —à—Ç.\n" \
           f"–ö—ç—à–±–µ–∫/—Å–∫–∏–¥–∫–∞: {order.cashback}%\n" \
           f"–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞: {order.goods_cost} —Ä—É–±–ª–µ–π\n" \
           f"üí≥ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏: {order.order_cost} —Ä—É–±–ª–µ–π\n\n" \
           f"–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:\n" \
           f"{order.goods_name}\n\n" \
           f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ –∑–∞–∫–∞–∑—É:\n" \
           f"{order.order_description}\n\n" \
           f"–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä:\n" \
           f"{order.goods_link}\n\n" \
           f"–ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏:\n" \
           f"{order.contacts}"

    markup = await confirm_redemption_order_kb()

    await call.message.edit_text(text=text, reply_markup=markup)


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ üí∞ –í—ã–∫—É–ø
@dp.callback_query_handler(NotBanned(), confirm_redemption_order_cd.filter(), state="confirm_redemption_order")
async def confirm_redemption_order_nav(call: types.CallbackQuery, callback_data: dict, user: Users, state: FSMContext,
                                       **kwargs):
    current_order_id = int((await state.get_data()).get("current_order_id"))

    # –û–±–Ω–æ–≤–ª—è–µ–º confirmed –∑–∞–∫–∞–∑–∞
    await update_order_confirmed_by_id(order_id=current_order_id, confirmed=True)

    # –ü–µ—Ä–µ–Ω–µ–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –æ–ø–ª–∞—Ç—É —Ç–æ–≤–∞—Ä–∞
    await paid_for_order(call=call, user=user, state=state)
