from datetime import datetime, timedelta
from typing import List

from aiogram import types
from aiogram.dispatcher import FSMContext

from filters import NotBanned
from keyboards.inline.callback_datas import list_orders_cd
from keyboards.inline.list_orders.confirm_execute_order_kb import confirm_execute_order_kb
from keyboards.inline.list_orders.execute_order_kb import execute_order_kb
from keyboards.inline.list_orders.performer_with_orders_kb import performer_with_orders_kb
from keyboards.inline.list_orders.performer_without_orders_kb import performer_without_orders_kb
from keyboards.inline.list_orders.show_order_kb import show_order_kb
from loader import dp
from utils.db_api.commands.orders_cmds import get_confirmed_paid_for_orders, get_performed_performers_orders, \
    get_reserved_performers_orders_, get_confirmed_paid_for_orders_by_type, add_reserved_order_to_user, \
    increase_by_1_orders_total_amount, get_order_by_id
from utils.db_api.models import Users, Orders
from utils.misc.functions import check_order_if_suitable
from utils.send_to_admins_app_order import send_to_admins_app_order


async def list_orders_menu(call: types.CallbackQuery, user: Users, state: FSMContext, **kwargs):
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è üî• –í—ã–∫—É–ø + –æ—Ç–∑—ã–≤ + ‚ù§, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –∏ –æ–ø–ª–∞—Ç–∏–ª–∏, –Ω–æ –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
    fire_orders = await get_confirmed_paid_for_orders_by_type(type_order="üî•")

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è ‚ù§ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –∏ –æ–ø–ª–∞—Ç–∏–ª–∏, –Ω–æ –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
    favorites_orders = await get_confirmed_paid_for_orders_by_type(type_order="‚ù§")

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è üí∞ –í—ã–∫—É–ø, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –∏ –æ–ø–ª–∞—Ç–∏–ª–∏, –Ω–æ –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
    redemption_orders = await get_confirmed_paid_for_orders_by_type(type_order="üí∞")

    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    performed_orders = await get_performed_performers_orders(user_id=user.id)

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏—è —á—Ç–æ –æ–∂–∏–¥–∞—é—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    reserved_orders = await get_reserved_performers_orders_(user_id=user.id)

    for orders in [fire_orders, favorites_orders, redemption_orders]:
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–µ –∑–∞–¥–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª
        orders[:] = [order for order in orders if await check_order_if_suitable(order, performed_orders)]

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–µ –∑–∞–¥–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–ª
        orders[:] = [order for order in orders if await check_order_if_suitable(order, reserved_orders)]

    await state.update_data(favorites_orders=favorites_orders,
                            redemption_orders=redemption_orders,
                            fire_orders=fire_orders)

    # –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∑–∞–¥–∞–Ω–∏—è
    if fire_orders or favorites_orders or redemption_orders:
        text = f"ü§ë –í—ã–±–µ—Ä–∏ –∑–∞–¥–∞–Ω–∏—è\n\n" \
               f"üëáüèª –í—ã–±–µ—Ä–∏ –∑–∞–¥–∞–Ω–∏—è"

        markup = await performer_with_orders_kb()

    else:
        await orders_ended_warning(call=call, user=user, state=state)
        return

    await call.message.edit_text(text=text, reply_markup=markup)


async def show_order(call: types.CallbackQuery, user: Users, state: FSMContext, type_order: str, order_id, **kwargs):
    data = await state.get_data()

    if type_order == 'üî•':
        fire_orders: List[Orders] = data.get('fire_orders')

        if fire_orders or order_id != '-':
            if order_id != '-':
                # –¢–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ
                current_order = await get_order_by_id(int(order_id))
            else:
                # –¢–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ
                current_order = fire_orders.pop(0)
                await state.update_data(fire_orders=fire_orders)

            text = f"–£—Å–ª—É–≥–∞:\n" \
                   f"üî• –í—ã–∫—É–ø + –æ—Ç–∑—ã–≤ + –∏–∑–±—Ä–∞–Ω–Ω–æ–µ\n\n" \
                   f"–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞: {current_order.goods_cost} —Ä—É–±–ª–µ–π\n" \
                   f"üßÆ –ö—ç—à–±–µ–∫/—Å–∫–∏–¥–∫–∞: {current_order.cashback} —Ä—É–±–ª–µ–π\n" \
                   f"üí≥ –í–∞—à–∞ –Ω–∞–≥—Ä–∞–¥–∞: 2 –±–∞–ª–ª–∞ + —Ç–æ–≤–∞—Ä\n\n" \
                   f"–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:\n{current_order.goods_name}\n\n" \
                   f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ –∑–∞–∫–∞–∑—É:\n{current_order.order_description}\n\n" \
                   f"‚ö†Ô∏è –í–ê–ñ–ù–û!\n" \
                   f"-–û—Å—Ç–∞–≤–∏—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤ —Å –æ—Ü–µ–Ω–∫–æ–π ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê –∏ —Å —Ñ–æ—Ç–æ üì∏\n\n" \
                   f"‚ö†Ô∏è –í–ê–ñ–ù–û!\n" \
                   f"-–î–æ–±–∞–≤—å –±—Ä–µ–Ω–¥ –∏ —Ç–æ–≤–∞—Ä –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ - –æ—Ç–º–µ—Ç—å ‚ô•Ô∏è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –±—Ä–µ–Ω–¥–∞ –∏ –≤ –∫–∞—Ä—Ç–æ—á–∫–µ —Ç–æ–≤–∞—Ä–∞.\n\n" \
                   f"‚ö†Ô∏è –í–ê–ñ–ù–û!\n" \
                   f"-–¢–æ–≤–∞—Ä –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å. –î–∞–±—ã –Ω–µ —Å–Ω–∏–∑–∏—Ç—å %%% –≤—ã–∫—É–ø–∞.\n\n" \
                   f"‚ö†Ô∏è –í–ê–ñ–ù–û!\n" \
                   f"-–û–¥–∏–Ω —Ç–æ–≤–∞—Ä –≤ –æ–¥–Ω–∏ —Ä—É–∫–∏.\n\n" \
                   f"–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä:\n{current_order.goods_link}\n\n" \
                   f"–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è " \
                   f"–Ω–∞ —Ç–æ–≤–∞—Ä, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É üëâüèª @support"

            markup = await show_order_kb(type_order=type_order, url=current_order.goods_link,
                                         order_id=current_order.id)
        else:
            await orders_ended_warning(call=call, user=user, state=state)
            return

    elif type_order == '‚ù§':
        favorites_orders: List[Orders] = data.get('favorites_orders')

        if favorites_orders or order_id != '-':
            if order_id != '-':
                # –¢–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ
                current_order = await get_order_by_id(int(order_id))
            else:
                # –¢–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ
                current_order = favorites_orders.pop(0)

                await state.update_data(favorites_orders=favorites_orders)

            text = f"–£—Å–ª—É–≥–∞:\n" \
                   f"‚ù§ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ\n\n" \
                   f"üí≥ –í–∞—à–∞ –Ω–∞–≥—Ä–∞–¥–∞: 2 –±–∞–ª–ª–∞ + —Ç–æ–≤–∞—Ä\n\n" \
                   f"–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:\n{current_order.goods_name}\n\n" \
                   f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ –∑–∞–∫–∞–∑—É:\n{current_order.order_description}\n\n" \
                   f"‚ö†Ô∏è –í–ê–ñ–ù–û!\n" \
                   f"-–î–æ–±–∞–≤—å –±—Ä–µ–Ω–¥ –∏ —Ç–æ–≤–∞—Ä –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ - –æ—Ç–º–µ—Ç—å ‚ô•Ô∏è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –±—Ä–µ–Ω–¥–∞ –∏ –≤ –∫–∞—Ä—Ç–æ—á–∫–µ —Ç–æ–≤–∞—Ä–∞.\n\n" \
                   f"–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä:\n{current_order.goods_link}\n\n" \
                   f"–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è " \
                   f"–Ω–∞ —Ç–æ–≤–∞—Ä, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É üëâüèª @support"

            markup = await show_order_kb(type_order=type_order, url=current_order.goods_link,
                                         order_id=current_order.id)
        else:
            await orders_ended_warning(call=call, user=user, state=state)
            return

    else:
        redemption_orders: List[Orders] = data.get('redemption_orders')

        if redemption_orders or order_id != '-':
            if order_id != '-':
                # –¢–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ
                current_order = await get_order_by_id(int(order_id))
            else:
                # –¢–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ
                current_order = redemption_orders.pop(0)

                await state.update_data(redemption_orders=redemption_orders)

            text = f"–£—Å–ª—É–≥–∞:\n" \
                   f"üí∞ –í—ã–∫—É–ø\n\n" \
                   f"–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞: {current_order.goods_cost} —Ä—É–±–ª–µ–π\n" \
                   f"üßÆ –ö—ç—à–±–µ–∫/—Å–∫–∏–¥–∫–∞: {current_order.cashback} —Ä—É–±–ª–µ–π\n" \
                   f"üí≥ –í–∞—à–∞ –Ω–∞–≥—Ä–∞–¥–∞: 2 –±–∞–ª–ª–∞ + —Ç–æ–≤–∞—Ä\n\n" \
                   f"–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:\n{current_order.goods_name}\n\n" \
                   f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ –∑–∞–∫–∞–∑—É:\n{current_order.order_description}\n\n" \
                   f"‚ö†Ô∏è –í–ê–ñ–ù–û!\n" \
                   f"-–¢–æ–≤–∞—Ä –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å. –î–∞–±—ã –Ω–µ —Å–Ω–∏–∑–∏—Ç—å %%% –≤—ã–∫—É–ø–∞.\n\n" \
                   f"‚ö†Ô∏è –í–ê–ñ–ù–û!\n" \
                   f"-–û–¥–∏–Ω —Ç–æ–≤–∞—Ä –≤ –æ–¥–Ω–∏ —Ä—É–∫–∏.\n\n" \
                   f"–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä:\n{current_order.goods_link}\n\n" \
                   f"–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è " \
                   f"–Ω–∞ —Ç–æ–≤–∞—Ä, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É üëâüèª @support"

            markup = await show_order_kb(type_order=type_order, url=current_order.goods_link,
                                         order_id=current_order.id)
        else:
            await orders_ended_warning(call=call, user=user, state=state)
            return

    await call.message.edit_text(text=text, reply_markup=markup, disable_web_page_preview=True)


async def execute_order(call: types.CallbackQuery, user: Users, state: FSMContext,
                        type_order: str, order_id: int, **kwargs):
    current_order = await get_order_by_id(order_id)

    execute_date = (datetime.now() - timedelta(days=7)).date()

    text = f"–í–Ω–∏–º–∞–Ω–∏–µ! –ï—Å–ª–∏ –≤—ã –Ω–∞–∂–∏–º–∞–µ—Ç–µ –∫–Ω–æ–ø–∫—É \"–í—ã–ø–æ–ª–Ω–∏—Ç—å\"," \
           f" —Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –±—É–¥–µ—Ç" \
           f" —Å–¥–µ–ª–∞–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 7 –¥–Ω–µ–π –¥–æ {execute_date}?\n\n" \
           f"‚ùó –ó–∞ –≤–∞–º–∏ –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–µ—Ç—Å—è –º–µ—Å—Ç–æ, –∏ –µ—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–µ" \
           f" –Ω–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, —Ç–æ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –±–∞–Ω.\n\n" \
           "‚ùó–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —É—Å–ª–æ–≤–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞.\n\n" \
           "‚ùó–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –Ω–µ –∑–∞–∫–∞–∑—ã–≤–∞–ª–∏ –ª–∏ —Ä–∞–Ω–µ–µ —Ç–æ–≤–∞—Ä.\n\n" \
           "‚ùó–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞ –≤–∞–º–∏ –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–µ—Ç—Å—è –º–µ—Å—Ç–æ" \
           " –∏ –µ—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, —Ç–æ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ø–∞–¥–µ—Ç –≤ –±–∞–Ω –Ω–∞ –≤—Ä–µ–º—è.\n\n" \
           "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 7 –¥–Ω–µ–π?"

    markup = await execute_order_kb(order_id=order_id, type_order=current_order.type_order)

    await call.message.edit_text(text=text, reply_markup=markup)


async def confirm_execute_order(call: types.CallbackQuery, user: Users, state: FSMContext, order_id: int, **kwargs):
    markup = await confirm_execute_order_kb()

    # –î–æ—Å—Ç–∞–µ–º –∑–∞–∫–∞–∑
    order = await get_order_by_id(order_id)

    # –ó–∞—è–≤–∫–∞ –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤ —á–∞—Ç –∞–¥–º–∏–Ω–æ–≤
    await send_to_admins_app_order(order=order, performer=user)

    await call.message.edit_text(text="–ó–∞—è–≤–∫–∞ –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–æ—Å–ª–∞–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.\n\n"
                                      "–°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
                                 reply_markup=markup)


@dp.callback_query_handler(NotBanned(), list_orders_cd.filter(), state="*")
async def list_orders_menu_nav(call: types.CallbackQuery, callback_data: dict, user: Users, state: FSMContext,
                               **kwargs):
    nav_btn = callback_data.get('nav_btn')
    order_id = callback_data.get('order_id')

    function = ''

    if nav_btn in "üî•‚ù§üí∞":
        function = show_order

    elif nav_btn == 'execute':
        order_id = int(order_id)
        function = execute_order

    elif nav_btn == 'confirm':
        order_id = int(order_id)
        function = confirm_execute_order

    await function(
        call=call,
        user=user,
        state=state,
        type_order=nav_btn,
        order_id=order_id
    )


async def orders_ended_warning(call: types.CallbackQuery, user: Users, state: FSMContext, **kwargs):
    text = "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –∑–∞–¥–∞–Ω–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.\n" \
           "–•–æ—Ç–∏—Ç–µ –≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏—è—Ö?\n\n" \
           "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É üëâüèª @support"

    markup = await performer_without_orders_kb()

    await call.message.edit_text(text=text, reply_markup=markup)
