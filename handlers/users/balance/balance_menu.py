from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import LabeledPrice

from filters import NotBanned
from keyboards.inline.balance.balance_menu_kb import balance_menu_kb
from keyboards.inline.balance.paid_for_order_kb import paid_for_order_kb
from keyboards.inline.balance.process_successful_payment_kb import process_successful_payment_kb
from keyboards.inline.callback_datas import balance_menu_cd
from loader import dp, bot
from utils.db_api.commands.orders_cmds import get_order_by_id, update_order_paid_for_by_id
from utils.db_api.commands.price_list_cmds import get_price_by_name
from utils.db_api.commands.referrals_cmds import get_recruiter, change_bonus_false
from utils.db_api.commands.transaction_cmds import add_translation
from utils.db_api.commands.users_cmds import increase_user_balance, get_user_by_id, increase_user_balance_from_ref
from utils.db_api.models import Users, Referrals

from utils.misc.payments_telegram import Payment


async def balance_menu(call: types.CallbackQuery, user: Users, state: FSMContext, **kwargs):
    text = f"<b>üíµ –í–∞—à –±–∞–ª–∞–Ω—Å:</b> {user.balance} —Ä—É–±.\n" \
           f"<b>üë§ –í–∞—à id:</b> {user.telegram_id}\n\n" \
           f"üëáüèª –ß—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å, —Å–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∑–∞–∫–∞–∑. –ï—Å–ª–∏ –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω, –≤—ã–±–µ—Ä–∏—Ç–µ –µ–≥–æ –Ω–∏–∂–µ:"

    markup = await balance_menu_kb(user=user)

    await call.message.edit_text(text=text, reply_markup=markup)


@dp.callback_query_handler(NotBanned(), balance_menu_cd.filter(), state="*")
async def paid_for_order(call: types.CallbackQuery, user: Users, state: FSMContext,
                         callback_data: dict = None, **kwargs):
    if callback_data:
        order_id = int(callback_data.get('order_id'))
        await state.update_data(current_order_id=order_id)
    else:
        order_id = int((await state.get_data()).get("current_order_id"))

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø–æ id
    order = await get_order_by_id(order_id=order_id)

    if order.type_order == "üî•":
        type_order_name = "üî• –í—ã–∫—É–ø + –æ—Ç–∑—ã–≤ + –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"

    elif order.type_order == "üí∞":
        type_order_name = "üí∞ –í—ã–∫—É–ø"

    else:
        type_order_name = "‚ù§ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ"

    text = f"–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {order.goods_name}\n\n" \
           f"–£—Å–ª—É–≥–∞: {type_order_name}\n" \
           f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {order.goal_amount}\n" \
           f"–†–∞–∑–º–µ—Ä –∫–µ—à–±—ç–∫–∞/—Å–∫–∏–¥–∫–∏: {order.cashback} —Ä—É–±–ª–µ–π\n\n" \
           f"–°—É–º–º–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {order.order_cost} —Ä—É–±–ª–µ–π\n\n" \
           f"üëá–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"

    markup = await paid_for_order_kb()

    await call.message.edit_text(text=text, reply_markup=markup)


@dp.callback_query_handler(NotBanned(), text="pay_for_order", state="*")
async def send_invoice(call: types.CallbackQuery, user: Users, state: FSMContext, **kwargs):
    order_id = int((await state.get_data()).get("current_order_id"))

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø–æ id
    order = await get_order_by_id(order_id=order_id)

    amount = int(str(int(order.order_cost)) + "_00")

    payment = Payment(
        title="Marketplace cashback Bot",
        description="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞:",
        start_parameter="",
        currency='RUB',
        prices=[
            LabeledPrice(label="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞",
                         amount=amount)
        ]
    )

    await bot.send_invoice(chat_id=call.message.chat.id,
                           **payment.generate_invoice(),
                           payload=f"{user.id}|{user.telegram_id}|{order.id}")


@dp.pre_checkout_query_handler(state="*")
async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
    print("\nprocess_pre_checkout_query\n")
    await bot.answer_pre_checkout_query(pre_checkout_query_id=pre_checkout_query.id,
                                        ok=True)


@dp.message_handler(state="*", content_types=types.ContentType.SUCCESSFUL_PAYMENT)
async def process_successful_payment(message: types.Message, user: Users, **kwargs):
    print("\nprocess_successful_payment\n")
    successful_payment = message.successful_payment

    order_id = int(successful_payment.invoice_payload.split('|')[2])
    amount = successful_payment.total_amount / 100

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø–æ id
    order = await get_order_by_id(order_id=order_id)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    await add_translation(user_id=user.id, amount=amount)

    # –£–≤–µ–ª–∏—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await increase_user_balance(user_id=user.id, amount=amount)

    # –û–±–Ω–æ–≤–ª—è–µ–º paid_for –∑–∞–∫–∞–∑–∞
    await update_order_paid_for_by_id(order_id=order.id, paid_for=True)

    # –£–∑–Ω–∞–µ–º –∫—Ç–æ –ø—Ä–∏–≤–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    referrals: Referrals = await get_recruiter(recruit_id=user.id)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏–≤–µ–ª —á–µ–ª–æ–≤–µ–∫ –∏ –µ—Å–ª–∏ –±–æ–Ω—É—Å –µ—â–µ –Ω–µ –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
    if referrals and referrals.bonus:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞ (–¢–æ–≥–æ –∫—Ç–æ –ø—Ä–∏–≤–µ–ª –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        recruiter = await get_user_by_id(user_id=referrals.recruiter_id)

        recruiter_bonus = (await get_price_by_name(name="recruiter_bonus")).price
        recruit_bonus = (await get_price_by_name(name="recruit_bonus")).price

        # –°—á–∏—Ç–∞–µ–º –±–æ–Ω—É—Å —Ä–µ–∫—Ä—É—Ç—É
        recruit_bonus_ = float(amount) * float(recruit_bonus) / 100
        # –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å —Ä–µ–∫—Ä—É—Ç—É
        await increase_user_balance(user_id=user.id, amount=recruit_bonus_)

        # –°—á–∏—Ç–∞–µ–º –±–æ–Ω—É—Å —Ä–µ–∫—Ä—É—Ç–µ—Ä—É
        recruiter_bonus_ = float(amount) * float(recruiter_bonus) / 100
        # –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å —Ä–µ–∫—Ä—É—Ç–µ—Ä—É
        await increase_user_balance(user_id=recruiter.id, amount=recruiter_bonus_)

        # –£–≤–µ–ª–∏—á–∏—Ç—å –±–∞–ª–∞–Ω—Å —Å —Ä–µ—Ñ. –ø—Ä–æ–≥—Ä–∞–º–º—ã –†–µ–∫—Ä—É—Ç–µ—Ä—É
        await increase_user_balance_from_ref(user_id=recruiter.id, amount=amount)

        # –∑–∞–±–∏—Ä–µ–º –±–æ–Ω—É—Å
        await change_bonus_false(referrals.id)

    text = f"üëå –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n\n" \
           f"–í–∞—à –∑–∞–∫–∞–∑: {order.order_name}\n" \
           f"–í—ã –º–æ–∂–µ—Ç–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –∑–∞–∫–∞–∑–æ–º –ø–µ—Ä–µ–π–¥—è –≤ \"üõí –ú–æ–∏ –∑–∞–∫–∞–∑—ã\"\n\n" \
           f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å –Ω–µ –±—É–¥–µ—Ç —Å–ø–∏—Å—ã–≤–∞—Ç—å—Å—è, –ø–æ–∫–∞ –≤—ã –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è."

    markup = await process_successful_payment_kb()

    await message.answer(text=text, reply_markup=markup)
